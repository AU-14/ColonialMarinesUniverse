using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Systems;
using Content.Shared.Administration;
using Content.Shared.CriminalRecords;
using Content.Shared.Dataset;
using Content.Shared.Random.Helpers;
using Content.Shared.Security;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client.CriminalRecords;

// TODO: dedupe shitcode from general records theres a lot
[GenerateTypedNameReferences]
public sealed partial class CriminalRecordsConsoleWindow : FancyWindow
{
    private readonly IPlayerManager _player;
    private readonly IPrototypeManager _proto;
    private readonly IRobustRandom _random;
    private readonly AccessReaderSystem _accessReader;
    [Dependency] private readonly IEntityManager _entManager = default!;

    public readonly EntityUid Console;

    private static readonly ProtoId<LocalizedDatasetPrototype> ReasonPlaceholders = "CriminalRecordsWantedReasonPlaceholders";

    public Action<uint?>? OnKeySelected;
    public Action<StationRecordFilterType, string>? OnFiltersChanged;
    public Action<SecurityStatus>? OnStatusSelected;
    public Action<uint>? OnCheckStatus;
    public Action<CriminalRecord, bool, bool>? OnHistoryUpdated;
    public Action? OnHistoryClosed;
    public Action<SecurityStatus, string>? OnDialogConfirmed;

    public Action<SecurityStatus>? OnStatusFilterPressed;
    public Action<CriminalRecord, int>? OnSetBounty;
    private uint _maxLength;
    private bool _access;
    private uint? _selectedKey;
    private CriminalRecord? _selectedRecord;

    private DialogWindow? _reasonDialog;

    private StationRecordFilterType _currentFilterType;

    private SecurityStatus _currentCrewListFilter;

    public CriminalRecordsConsoleWindow(EntityUid console, uint maxLength, IPlayerManager playerManager, IPrototypeManager prototypeManager, IRobustRandom robustRandom, AccessReaderSystem accessReader)
    {
        RobustXamlLoader.Load(this);

        Console = console;
        _player = playerManager;
        _proto = prototypeManager;
        _random = robustRandom;
        _accessReader = accessReader;
        IoCManager.InjectDependencies(this);

        _maxLength = maxLength;
        _currentFilterType = StationRecordFilterType.Name;

        _currentCrewListFilter = SecurityStatus.None;

        OpenCentered();

        foreach (var item in Enum.GetValues<StationRecordFilterType>())
        {
            FilterType.AddItem(GetTypeFilterLocals(item), (int)item);
        }

        foreach (var status in Enum.GetValues<SecurityStatus>())
        {
            AddStatusSelect(status);
        }

        //Populate status to filter crew list
        foreach (var item in Enum.GetValues<SecurityStatus>())
        {
            CrewListFilter.AddItem(GetCrewListFilterLocals(item), (int)item);
        }

        OnClose += () => _reasonDialog?.Close();

        RecordListing.OnItemSelected += args =>
        {
            if (RecordListing[args.ItemIndex].Metadata is not uint cast)
                return;

            OnKeySelected?.Invoke(cast);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            OnKeySelected?.Invoke(null);
        };

        FilterType.OnItemSelected += eventArgs =>
        {
            var type = (StationRecordFilterType)eventArgs.Id;

            if (_currentFilterType != type)
            {
                _currentFilterType = type;
                FilterListingOfRecords(FilterText.Text);
            }
        };

        //Select Status to filter crew
        CrewListFilter.OnItemSelected += eventArgs =>
        {
            var type = (SecurityStatus)eventArgs.Id;

            if (_currentCrewListFilter != type)
            {
                _currentCrewListFilter = type;

                StatusFilterPressed(type);

            }
        };

        FilterText.OnTextEntered += args =>
        {
            FilterListingOfRecords(args.Text);
        };

        StatusOptionButton.OnItemSelected += args =>
        {
            SetStatus((SecurityStatus)args.Id);
        };

        HistoryButton.OnPressed += _ =>
        {
            if (_selectedRecord is { } record)
                OnHistoryUpdated?.Invoke(record, _access, true);
        };
    }

    public void StatusFilterPressed(SecurityStatus statusSelected)
    {
        OnStatusFilterPressed?.Invoke(statusSelected);
    }

    public void UpdateState(CriminalRecordsConsoleState state)
    {
        if (state.Filter != null)
        {
            if (state.Filter.Type != _currentFilterType)
            {
                _currentFilterType = state.Filter.Type;
            }

            if (state.Filter.Value != FilterText.Text)
            {
                FilterText.Text = state.Filter.Value;
            }
        }

        if (state.FilterStatus != _currentCrewListFilter)
        {
            _currentCrewListFilter = state.FilterStatus;
        }

        _selectedKey = state.SelectedKey;
        FilterType.SelectId((int)_currentFilterType);
        CrewListFilter.SelectId((int)_currentCrewListFilter);
        NoRecords.Visible = state.RecordListing == null || state.RecordListing.Count == 0;
        PopulateRecordListing(state.RecordListing);

        // set up the selected person's record
        var selected = _selectedKey != null;

        PersonContainer.Visible = selected;
        RecordUnselected.Visible = !selected;

        _access = _player.LocalSession?.AttachedEntity is {} player
            && _accessReader.IsAllowed(player, Console);

        // hide access-required editing parts when no access
        var editing = _access && selected;
        StatusOptionButton.Disabled = !editing;

        if (state is { CriminalRecord: not null, StationRecord: not null })
        {
            PopulateRecordContainer(state.StationRecord, state.CriminalRecord);
            OnHistoryUpdated?.Invoke(state.CriminalRecord, _access, false);
            _selectedRecord = state.CriminalRecord;
        }
        else
        {
            _selectedRecord = null;
            OnHistoryClosed?.Invoke();
        }
    }

    private void PopulateRecordListing(Dictionary<uint, string>? listing)
    {
        if (listing == null)
        {
            RecordListing.Clear();
            return;
        }

        var entries = listing.Select(i => new ItemList.Item(RecordListing) {
                Text = i.Value,
                Metadata = i.Key
        }).ToList();
        entries.Sort((a, b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal));
        RecordListing.SetItems(entries, (a,b) => string.Compare(a.Text, b.Text));
    }

    private void PopulateRecordContainer(GeneralStationRecord stationRecord, CriminalRecord criminalRecord)
    {
        var na = Loc.GetString("generic-not-available-shorthand");
        PersonName.Text = stationRecord.Name;
        PersonPrints.Text = stationRecord.Fingerprint ?? na;
        PersonDna.Text = stationRecord.DNA ?? na;
        PersonBounty.Text = criminalRecord.Bounty > 0 ? criminalRecord.Bounty.ToString() : na;
        // Show bounty input and set button only if user can edit
        BountyInput.Visible = _access;
        BountySetButton.Visible = _access;
        if (_access)
        {
            BountyInput.Text = criminalRecord.Bounty > 0 ? criminalRecord.Bounty.ToString() : string.Empty;
            BountySetButton.OnPressed += BountySetButton_Pressed;
        }

        else
        {
            BountyInput.Text = string.Empty;
        }

    }



    // Handler for when the bounty set button is pressed
    private void BountySetButton_Pressed(BaseButton.ButtonEventArgs args)
    {
        if (_selectedRecord == null)
            return;
        if (int.TryParse(BountyInput.Text, out var bounty))
        {
            OnSetBounty?.Invoke(_selectedRecord, bounty);
        }
    }

    private void AddStatusSelect(SecurityStatus status)
    {
        var name = Loc.GetString($"criminal-records-status-{status.ToString().ToLower()}");
        StatusOptionButton.AddItem(name, (int)status);
    }

    private void FilterListingOfRecords(string text = "")
    {
        OnFiltersChanged?.Invoke(_currentFilterType, text);
    }

    private void SetStatus(SecurityStatus status)
    {
        if (status == SecurityStatus.Wanted || status == SecurityStatus.Suspected)
        {
            GetReason(status);
            return;
        }

        OnStatusSelected?.Invoke(status);
    }

    private void GetReason(SecurityStatus status)
    {
        if (_reasonDialog != null)
        {
            _reasonDialog.MoveToFront();
            return;
        }

        var field = "reason";
        var title = Loc.GetString("criminal-records-status-" + status.ToString().ToLower());
        var placeholders = _proto.Index(ReasonPlaceholders);
        var placeholder = Loc.GetString("criminal-records-console-reason-placeholder", ("placeholder", _random.Pick(placeholders))); // just funny it doesn't actually get used
        var prompt = Loc.GetString("criminal-records-console-reason");
        var entry = new QuickDialogEntry(field, QuickDialogEntryType.LongText, prompt, placeholder);
        var entries = new List<QuickDialogEntry>() { entry };
        _reasonDialog = new DialogWindow(title, entries);

        _reasonDialog.OnConfirmed += responses =>
        {
            var reason = responses[field];
            if (reason.Length < 1 || reason.Length > _maxLength)
                return;

            OnDialogConfirmed?.Invoke(status, reason);
        };

        _reasonDialog.OnClose += () => { _reasonDialog = null; };
    }
    private string GetTypeFilterLocals(StationRecordFilterType type)
    {
        return Loc.GetString($"criminal-records-{type.ToString().ToLower()}-filter");
    }

    private string GetCrewListFilterLocals(SecurityStatus type)
    {
        string result;

        // If "NONE" override to "show all"
        if (type == SecurityStatus.None)
        {
            result = Loc.GetString("criminal-records-console-show-all");
        }
        else
        {
            result = Loc.GetString($"criminal-records-status-{type.ToString().ToLower()}");
        }

        return result;
    }

    public uint? SelectedKey => _selectedKey;
}
