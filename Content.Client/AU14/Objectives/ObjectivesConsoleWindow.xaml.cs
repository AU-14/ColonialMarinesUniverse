using Content.Shared.AU14.Objectives;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Client.AU14.Objectives;

namespace Content.Client.AU14.Objectives;

[GenerateTypedNameReferences]
public sealed partial class ObjectivesConsoleWindow : FancyWindow
{
    public ObjectivesConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        CloseButton.OnPressed += _ => Close();
    }

    public void UpdateObjectives(List<ObjectiveEntry> objectives, int currentWinPoints, int requiredWinPoints)
    {
        CurrentWinPointsLabel.Text = $"Current Win Points: {currentWinPoints}";
        RequiredWinPointsLabel.Text = $"Points to Final Objective: {requiredWinPoints}";
        ObjectivesList.DisposeAllChildren();
        foreach (var obj in objectives)
        {
            var container = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };
            string typeText = obj.Type switch
            {
                ObjectiveTypeDisplay.Minor => "[Minor] ",
                ObjectiveTypeDisplay.Major => "[Major] ",
                ObjectiveTypeDisplay.Win => "[Win] ",
                _ => ""
            };
            var labelText = typeText + obj.Description;
            if (obj.Repeating)
                labelText += " [Repeating]";
            if (!string.IsNullOrEmpty(obj.Progress))
                labelText += $" ({obj.Progress})";
            if (obj.MaxRepeatable is { } maxRepeat && maxRepeat > 0)
            {
                if (obj.RepeatsCompleted is int repeats)
                    labelText += $" (Completed {repeats}/{maxRepeat} times)";
                else
                    labelText += $" (Can be completed {maxRepeat} times)";
            }
            else if (obj.RepeatsCompleted is int repeats && repeats > 0)
            {
                labelText += $" (Times completed: {repeats})";
            }
            if (obj.Points > 0)
                labelText += $" [Worth {obj.Points} points]";
            var label = new Label { Text = labelText };
            // Add Intel button
            var intelButton = new Button { Text = "Intel", Margin = new Thickness(8, 0, 0, 0) };
            intelButton.OnPressed += _ =>
            {
                var intelWindow = new ObjectiveIntelWindow();
                intelWindow.OpenCentered();
            };
            string statusText;
            Color statusColor;
            switch (obj.Status)
            {
                case ObjectiveStatusDisplay.Completed:
                    statusText = "Completed";
                    statusColor = Color.Lime;
                    break;
                case ObjectiveStatusDisplay.Failed:
                    statusText = "Failed";
                    statusColor = Color.Red;
                    break;
                default:
                    statusText = "Uncompleted";
                    statusColor = Color.Gold;
                    break;
            }
            var status = new Label
            {
                Text = statusText,
                Modulate = statusColor,
                HorizontalAlignment = HAlignment.Right,
                Margin = new Thickness(8, 0, 0, 0)
            };
            container.AddChild(label);
            container.AddChild(intelButton);
            container.AddChild(status);
            ObjectivesList.AddChild(container);
        }
    }
}
